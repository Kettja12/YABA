@inject IJSRuntime JS
@inject IStringLocalizer<Resource> R
@inject ApiService ApiService
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">YABA @dateTime</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
          @if (StateContainer.IsLogin)
        {

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="dashboard">
                    <span class="fa fa-table-columns me-2" aria-hidden="true"></span> @R["Dashboard"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="reservation">
                    <span class="fa fa-hotel me-2" aria-hidden="true"></span>@R["Reservation"]
                </NavLink>
            </div>

            @if (StateContainer.CurrentUser.Functions.Contains(AppCodes.Maintenance))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link dropdown-toggle" href="#maintenance"
                    @onclick="ToggleMaintenanceMenu">
                        <span class="fa fa-gear me-2" aria-hidden="true"></span> @R["Maintenance"]
                    </NavLink>
                    <div class="@MaintenanceMenuCssClass ps-2">
                        @if (StateContainer.CurrentUser.Functions.Contains(AppCodes.AddModifyUser))
                        {
                            <NavLink class="nav-link" href="users">
                                <span class="fa fa-users me-2" aria-hidden="true"></span> @R["Users"]
                            </NavLink>
                        }
                        @if (StateContainer.CurrentUser.Functions.Contains(AppCodes.AddModifyUsergroups))
                        {
                            <NavLink class="nav-link" href="usergroups">
                                <span class="fa fa-object-group me-2" aria-hidden="true"></span> @R["Manage Usergroups"]
                            </NavLink>
                        }
                    </div>
                </div>
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="User">
                    <span class="oi oi-person" aria-hidden="true"></span> @StateContainer.CurrentUser.FirstName @StateContainer.CurrentUser.LastName
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="#logout" @onclick="@Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> @R["Logout"]
                </NavLink>
            </div>
        }
        else
        {
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="oi oi-account-login" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        }
        <div class="nav-item px-3">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" @onchange="e=>{ToggleTheme();}" checked="@screenMode">
            </div>
        </div>
    </nav>
</div>


@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool screenMode = false;
    private string dateTime { get; set; }

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
        base.OnInitialized();
        var timer = new System.Threading.Timer((_) =>
        {

            InvokeAsync(async () =>
            {
                dateTime = await GetValue();
                StateHasChanged();
            });
        }, null, 0, 100000);

    }

    private async Task<string> GetValue()
    {
        if (StateContainer.IsAuthenticated==false) return "";
        dynamic request = new ExpandoObject();
        RefreshResponse? message = await ApiService
            .PostAsync<RefreshResponse>("Master/RefreshToken", request);
        if (message!=null && message.AuthToken!= string.Empty){
            StateContainer.LoginUser.RefreshTime = message.refreshTime;
            return message.refreshTime.ToString();
        }
        else
        {
            StateContainer.ResetLogin();
        };
        return "";
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var theme = await JS.InvokeAsync<string>("getTheme");
            screenMode = theme == "dark";
            StateHasChanged();
        }
    }

    private bool collapseMaintenanceMenu = false;
    private string? MaintenanceMenuCssClass => collapseMaintenanceMenu ? "" : "d-none";
    private void ToggleMaintenanceMenu()
    {
        ToggleNavMenu();
        collapseMaintenanceMenu = !collapseMaintenanceMenu;
    }
    private async void ToggleTheme()
    {

        screenMode = !screenMode;
        if (screenMode)
        {
            await JS.InvokeVoidAsync("setTheme", "dark");
        }
        else
        {
            await JS.InvokeVoidAsync("setTheme", "light");
        }
    }

    private async void Logout()
    {
        if (StateContainer.LoginUser != null)
        {
            dynamic request = new ExpandoObject();
            RefreshResponse? message = await ApiService.PostAsync<RefreshResponse>(
                StateContainer.LoginUser.CurrentDatabase + "/Logout",request);
            message = await ApiService.PostAsync<RefreshResponse>("Master/Logout",request);
        }
        StateContainer.ResetLogin();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

}
