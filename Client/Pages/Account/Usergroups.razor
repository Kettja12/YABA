@inject IStringLocalizer<Resource> R
@inject StateContainer StateContainer
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@page "/Usergroups"
<PageTitle>@R["Usergroups"]</PageTitle>
<div class="row">
    <div class="col1">
        <div class="row align-items-start">
            <div class="row">
                <div class="col-10">
                    <select class="form-select mt-1" @onchange="@(async (ChangeEventArgs e) =>await LoadUsergroupChildrens(e))">
                        <option value="0">@R["Select usergroup"]</option>
                        @foreach (var item in usergroups)
                        {
                            <option class="dropdown-item" value="@item.Id">@item.Value</option>
                        }
                    </select>
                </div>
                <div class="col-2">
                    <button type="button" class="btn btn-primary m-1" @onclick="ToggleNewUsergroup">@R["Add"]</button>
                </div>
            </div>
        </div>
        @if (newUsergroup)
        {

            <div class="row">
                <div class="mb-3">
                    <label for="usergroupname" class="form-label">@R["New usergroup"]</label>
                    <input type="text" class="form-control" id="usergroupname" @onclick="SaveNewUsergroup">
                </div>

            </div>
            <div class="mt-3">
                <button type="button" class="btn btn-primary m-1" @onclick="SaveNewUsergroup">@R["Save"]</button>
            </div>
        }
        @if (usergroup > 0)
        {
            <div class="row">
                <h3>@R["Rights"]</h3>
                <ul class="list-group">
                    @foreach (var item in functions)
                    {
                        <li class="list-group-item" value="@item.Id">
                            <input class="form-check-input" type="checkbox" value=""
                                   checked="@item.IsChecked" @onchange="e=>{Toggle(item);}"> @item.Value
                        </li>
                    }
                </ul>
            </div>
            <div class="mt-3">
                <button type="button" class="btn btn-primary m-1" @onclick="SaveUsergoupFunctions" disabled=@usergroupSaveDisabled>@R["Save"]</button>
            </div>
        }
    </div>
    @if (usergroup > 0)
    {
        <div class="col1">
            <div class="row">
                <h3>@R["Users"]</h3>
                <ul class="list-group">
                    @foreach (var item in users)
                    {
                        <li class="list-group-item" value="@item.Id">
                            <input class="form-check-input m-1" type="checkbox" @bind="@item.IsChecked">
                            @item.Value
                        </li>
                    }
                </ul>
            </div>
            @if (users.Count > 0)
            {
                <div class="mt-3">
                    <button type="button" class="btn btn-primary m-1" @onclick="RemoveUsers">@R["Remove selected users"]</button>
                </div>
            }

        </div>
        <div class="col1">
            <div class="row">
                <h3>@R["Add Users"]</h3>
                <div class="row">
                    <input class="form-control col-12" placeholder=@R["Add search key"] @bind="searchKey" @oninput="(e)=> loadUsers(e)">
                </div>
            </div>
            <div class="row mt-3">

                <ul class="list-group">
                    @foreach (var item in findUsers)
                    {
                        <li class="list-group-item" value="@item.Id">
                            <input class="form-check-input m-1" type="checkbox" @bind="@item.IsChecked">
                            @item.Value
                        </li>
                    }
                </ul>
            </div>
            @if (findUsers.Count > 0)
            {
                <div class="mt-3">
                    <button type="button" class="btn btn-primary m-1" @onclick="AddNewUsers">@R["Add selected users"]</button>
                </div>
            }

        </div>
    }
</div>
@code {
    private List<IdValuePair> usergroups { get; set; } = new();
    private List<CheckListItem> functions = new();
    private List<CheckListItem> users = new();
    private List<CheckListItem> findUsers = new();
    bool usergroupSaveDisabled = true;
    private string searchKey = "";
    private int selectedCount = 0;
    private int usergroup {get;set;}

    protected override void OnInitialized()
    {

        base.OnInitialized();

    }

    private async Task SetUsergroup(int value)
    {
        usergroup = value;
        functions = await LoadUsergoupFunctionsAsync(usergroup);
        usergroupSaveDisabled = value == 0;
        if (value > 0) newUsergroup = false;
    }

    private bool newUsergroup = false;
    private string newUsergroupName = "";

    private void ToggleNewUsergroup()
    {
        newUsergroup = !newUsergroup;
        usergroup = 0;
    }

    private void Toggle(CheckListItem item)
    {
        item.IsChecked = !item.IsChecked;
    }

    private async Task LoadUsergroupChildrens(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            if (id > 0) newUsergroup = false;
            usergroup = id;
            functions = await LoadUsergoupFunctionsAsync(id);
            usergroupSaveDisabled = id == 0;
            users = await LoadUsergroupUsersAsync(id);
            searchKey = "";
            findUsers = new();
        }



    }
    private async Task loadUsers(ChangeEventArgs e)
    {
        searchKey = e.Value.ToString();
        findUsers = await FindUsersAsync(searchKey, usergroup);
    }

    private async Task AddNewUsers()
    {
        var response = await AddUsergroupUsersAsync(usergroup,findUsers);
        findUsers = await FindUsersAsync(searchKey, usergroup);
        users = await LoadUsergroupUsersAsync(usergroup);
    }
    private async Task RemoveUsers()
    {

        var response = await RemoveUsergroupUsersAsync(usergroup, users);
        findUsers = await FindUsersAsync(searchKey, usergroup);
        users = await LoadUsergroupUsersAsync(usergroup);

    }

    

}
